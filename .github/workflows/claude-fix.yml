name: Claude Code Fix

on:
  issue_comment:
    types: [created, edited]

jobs:
  claude-fix:
    if: (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude-fix'))
    
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Install repgrep
        run: sudo apt-get update && sudo apt-get install -y ripgrep
      - name: Install dependencies
        run: npm install
      - name: Run Claude Code
        uses: grll/claude-code-action@beta
        with:
          use_oauth: 'true'
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          timeout_minutes: "30"
          model: "claude-sonnet-4-20250514"
          allowed_tools: "Bash,View,LS,GlobTool,GrepTool,Write,Edit,Read"
          direct_prompt: |
            以下のガイドラインに従って Pull Request への指摘に対処する。
            - Pull Requestに紐付いているissueを読んで実装されている内容を理解する
            - issue の内容・ Pull Request コメント・ Pull Request の変化点を理解する
            - レビュー内容を深く読み込み理解する
            - レビュー内容が妥当であれば修正を行う

            実装が不十分で、追加実装や大幅な修正が必要な場合、以下のガイドラインに従う。

            実装ガイドライン

            - はじめにタスクの全体像(指示された参照先ドキュメントを含む)と実装状態を把握し、TODOリストを作成すること
              - どこまでが実装されており、何をする必要があるかを、コードベースと Pull Request のコメントから正確に把握する
              - 実行漏れをなくすため、リストが長くなっても構わない
            - ツールの結果を受け取った後、その品質を慎重に検討し、次に進む前に最適な次のステップを決定すること
              - この新しい情報に基づいて計画し、反復するために思考(think)を使用し、最善の次のアクションを取ること。
            - 最大の効率を得るために、複数の独立した操作を実行する必要がある場合は、順次ではなく、関連するすべてのツールを同時に呼び出すこと。
            - 反復のために一時的な新しいファイル、スクリプト、またはヘルパーファイルを作成した場合は、タスクの最後にこれらのファイルを削除してクリーンアップすること。
            - テストを書いてから実装を開始すること(TDD)
            - コードベースにまだ存在しない機能であっても、テスト用のモック実装を作成しないこと
            - テストが失敗するのを確認してからコードの実装を開始すること
            - コードを実装しながらテストがグリーンになるようコードをデバッグすること(テストは修正しない)
            - ユーザーが予測可能な、客観的に妥当性のある一般的な実装を維持すること
              - IMPORTANT: Predictability beats cleverness.
            - テストケース以外の機能は実装しないこと
            - 各実装ステップ後にテストを実行して確認すること
            - テストが通ることを確認したら確認したら以下の観点でリファクタリングを行うこと
              - 重複コードの除去
              - 可読性の向上
              - パフォーマンスの最適化
              - ドキュメントの更新(CLAUDE.md, design.md)
              - コメントの記載、実装と乖離した古いコメントの修正
            - IMPORTANT: 途中で間違いに気がついたら即座に軌道修正すること。
            - YOU MUST: 最後にlint/format/型チェック/テスト(導入済みのものだけ)を行い、警告・エラーがない状態でcommit/push/PRを行う
            
            デバッグガイドライン

            - テストが失敗した場合、テストにデバッグログを含め、実行時にログから問題解決のヒントを収集すること
              - IMPORTANT: 問題が解決した後、デバッグログは消去すること
            - 同じアプローチが2回失敗した場合、`think`キーワードを使って拡張思考で問題を分析すること
